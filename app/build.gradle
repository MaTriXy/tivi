/*
 * Copyright 2017 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    // Only run the method counter on CI
    runOnEachPackage = ci
}

apply plugin: 'com.github.triplet.play'
play {
    track = 'alpha'
    uploadImages = true
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
    kotlin {
        target "**/*.kt"
        ktlint(versions.ktlint)
        licenseHeaderFile '../spotless/copyright.kt'
    }
}

def haveFabricApiKey = !propOrDef("TIVI_FABRIC_API_KEY", "").isEmpty()
if (haveFabricApiKey) {
    apply plugin: 'io.fabric'
}

android {
    compileSdkVersion 27

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = propOrDef('TIVI_PLAY_PUBLISHER_ACCOUNT', "")
            pk12File = rootProject.file('signing/play-account.p12')
        }
    }

    defaultConfig {
        applicationId "me.banes.chris.tivi"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 6
        versionName "0.1.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        playAccountConfig = playAccountConfigs.defaultAccountConfig

        manifestPlaceholders += ['appAuthRedirectScheme': 'me.banes.chris.tivi']

        // Crashlytics. Disabled by default
        manifestPlaceholders += ["fabric-api-key": propOrDef("TIVI_FABRIC_API_KEY", "")]
        ext.enableCrashlytics = false
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile rootProject.file("signing/app-release.jks")
            storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
            keyAlias "tivi"
            keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev [${getGitHash()}]"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'

            // Enable crashlytics
            ext.enableCrashlytics = haveFabricApiKey
        }
    }
}

dependencies {
    implementation project(":data")
    implementation project(":trakt")
    implementation project(":tmdb")

    implementation "android.arch.lifecycle:extensions:${versions.arch_comp}"
    implementation "android.arch.lifecycle:reactivestreams:${versions.arch_comp}"
    kapt "android.arch.lifecycle:compiler:${versions.arch_comp}"

    implementation "android.arch.paging:runtime:${versions.arch_comp_paging}"

    implementation "com.android.support:appcompat-v7:${versions.support_library}"
    implementation "com.android.support:design:${versions.support_library}"
    implementation "com.android.support:customtabs:${versions.support_library}"

    implementation "com.android.support.constraint:constraint-layout:${versions.constraint_layout}"

    implementation 'com.gabrielittner.threetenbp:lazythreetenbp:0.2.0'

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "com.github.bumptech.glide:glide:4.2.0"

    implementation 'com.xwray:groupie:2.0.0-beta1'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation("com.android.support.test.espresso:espresso-core:${versions.espresso}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.android.support.test:runner:1.0.1'

    debugImplementation "nl.littlerobots.rxlint:rxlint:${versions.rxlint}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}"

    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}